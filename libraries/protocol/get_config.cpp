#include <surf/protocol/get_config.hpp>
#include <surf/protocol/config.hpp>
#include <surf/protocol/asset.hpp>
#include <surf/protocol/types.hpp>
#include <surf/protocol/version.hpp>

namespace surf { namespace protocol {

fc::variant_object get_config()
{
   fc::mutable_variant_object result;

#ifdef IS_TEST_NET
   result[ "IS_TEST_NET" ] = true;
#else
   result[ "IS_TEST_NET" ] = false;
#endif

   result["SURF_100_PERCENT"] = SURF_100_PERCENT;
   result["SURF_1_PERCENT"] = SURF_1_PERCENT;
   result["SURF_1_TENTH_PERCENT"] = SURF_1_TENTH_PERCENT;
   result["SURF_ACCOUNT_RECOVERY_REQUEST_EXPIRATION_PERIOD"] = SURF_ACCOUNT_RECOVERY_REQUEST_EXPIRATION_PERIOD;
   result["SURF_ACTIVE_CHALLENGE_FEE"] = SURF_ACTIVE_CHALLENGE_FEE;
   result["SURF_ADDRESS_PREFIX"] = SURF_ADDRESS_PREFIX;
   result["SURF_BANDWIDTH_AVERAGE_WINDOW_SECONDS"] = SURF_BANDWIDTH_AVERAGE_WINDOW_SECONDS;
   result["SURF_BANDWIDTH_PRECISION"] = SURF_BANDWIDTH_PRECISION;
   result["SURF_BLOCKCHAIN_HARDFORK_VERSION"] = SURF_BLOCKCHAIN_HARDFORK_VERSION;
   result["SURF_BLOCKCHAIN_VERSION"] = SURF_BLOCKCHAIN_VERSION;
   result["SURF_BLOCK_INTERVAL"] = SURF_BLOCK_INTERVAL;
   result["SURF_BLOCKS_PER_DAY"] = SURF_BLOCKS_PER_DAY;
   result["SURF_BLOCKS_PER_HOUR"] = SURF_BLOCKS_PER_HOUR;
   result["SURF_BLOCKS_PER_YEAR"] = SURF_BLOCKS_PER_YEAR;
   result["SURF_CASHOUT_WINDOW_SECONDS"] = SURF_CASHOUT_WINDOW_SECONDS;
   result["SURF_CHAIN_ID"] = SURF_CHAIN_ID;
   result["SURF_CONTENT_CONSTANT"] = SURF_CONTENT_CONSTANT;
   result["SURF_CONTENT_CURATE_REWARD_PERCENT"] = SURF_CONTENT_CURATE_REWARD_PERCENT;
   result["SURF_CONTENT_REWARD_PERCENT"] = SURF_CONTENT_REWARD_PERCENT;
   result["SURF_CREATE_ACCOUNT_DELEGATION_RATIO"] = SURF_CREATE_ACCOUNT_DELEGATION_RATIO;
   result["SURF_CREATE_ACCOUNT_DELEGATION_TIME"] = SURF_CREATE_ACCOUNT_DELEGATION_TIME;
   result["SURF_CREATE_ACCOUNT_WITH_SURF_MODIFIER"] = SURF_CREATE_ACCOUNT_WITH_SURF_MODIFIER;
   result["SURF_EQUIHASH_K"] = SURF_EQUIHASH_K;
   result["SURF_EQUIHASH_N"] = SURF_EQUIHASH_N;
   result["SURF_GENESIS_TIME"] = SURF_GENESIS_TIME;
   result["SURF_GENESIS_TIME_EPOCH"] = SURF_GENESIS_TIME_EPOCH;
   result["SURF_HARDFORK_REQUIRED_WITNESSES"] = SURF_HARDFORK_REQUIRED_WITNESSES;
   result["SURF_INFLATION_NARROWING_PERIOD"] = SURF_INFLATION_NARROWING_PERIOD;
   result["SURF_INFLATION_RATE_START_PERCENT"] = SURF_INFLATION_RATE_START_PERCENT;
   result["SURF_INFLATION_RATE_STOP_PERCENT"] = SURF_INFLATION_RATE_STOP_PERCENT;
   result["SURF_INIT_MINER_NAME"] = SURF_INIT_MINER_NAME;
   result["SURF_INIT_PUBLIC_KEY_STR"] = SURF_INIT_PUBLIC_KEY_STR;
#if 0
   // do not expose private key, period.
   // we need this line present but inactivated so CI check for all constants in config.hpp doesn't complain.
   result["SURF_INIT_PRIVATE_KEY"] = SURF_INIT_PRIVATE_KEY;
#endif
   result["SURF_INIT_SUPPLY"] = SURF_INIT_SUPPLY;
   result["SURF_IRREVERSIBLE_THRESHOLD"] = SURF_IRREVERSIBLE_THRESHOLD;
   result["SURF_MAX_ACCOUNT_NAME_LENGTH"] = SURF_MAX_ACCOUNT_NAME_LENGTH;
   result["SURF_MAX_ACCOUNT_WITNESS_VOTES"] = SURF_MAX_ACCOUNT_WITNESS_VOTES;
   result["SURF_MAX_BLOCK_SIZE"] = SURF_MAX_BLOCK_SIZE;
   result["SURF_SOFT_MAX_BLOCK_SIZE"] = SURF_SOFT_MAX_BLOCK_SIZE;
   result["SURF_MAX_COMMENT_DEPTH"] = SURF_MAX_COMMENT_DEPTH;
   result["SURF_MAX_MEMO_SIZE"] = SURF_MAX_MEMO_SIZE;
   result["SURF_MAX_WITNESSES"] = SURF_MAX_WITNESSES;
   result["SURF_MAX_MINER_WITNESSES"] = SURF_MAX_MINER_WITNESSES;
   result["SURF_MAX_PERMLINK_LENGTH"] = SURF_MAX_PERMLINK_LENGTH;
   result["SURF_MAX_PROXY_RECURSION_DEPTH"] = SURF_MAX_PROXY_RECURSION_DEPTH;
   result["SURF_MAX_RESERVE_RATIO"] = SURF_MAX_RESERVE_RATIO;
   result["SURF_MAX_RUNNER_WITNESSES"] = SURF_MAX_RUNNER_WITNESSES;
   result["SURF_MAX_SHARE_SUPPLY"] = SURF_MAX_SHARE_SUPPLY;
   result["SURF_MAX_SIG_CHECK_DEPTH"] = SURF_MAX_SIG_CHECK_DEPTH;
   result["SURF_MAX_TIME_UNTIL_EXPIRATION"] = SURF_MAX_TIME_UNTIL_EXPIRATION;
   result["SURF_MAX_TRANSACTION_SIZE"] = SURF_MAX_TRANSACTION_SIZE;
   result["SURF_MAX_UNDO_HISTORY"] = SURF_MAX_UNDO_HISTORY;
   result["SURF_MAX_VOTE_CHANGES"] = SURF_MAX_VOTE_CHANGES;
   result["SURF_MAX_VOTED_WITNESSES"] = SURF_MAX_VOTED_WITNESSES;
   result["SURF_MAX_WITHDRAW_ROUTES"] = SURF_MAX_WITHDRAW_ROUTES;
   result["SURF_MAX_WITNESS_URL_LENGTH"] = SURF_MAX_WITNESS_URL_LENGTH;
   result["SURF_MIN_ACCOUNT_CREATION_FEE"] = SURF_MIN_ACCOUNT_CREATION_FEE;
   result["SURF_MIN_ACCOUNT_NAME_LENGTH"] = SURF_MIN_ACCOUNT_NAME_LENGTH;
   result["SURF_MIN_BLOCK_SIZE"] = SURF_MIN_BLOCK_SIZE;
   result["SURF_MIN_BLOCK_SIZE_LIMIT"] = SURF_MIN_BLOCK_SIZE_LIMIT;
   result["SURF_MIN_PAYOUT_SURF"] = SURF_MIN_PAYOUT_SURF;
   result["SURF_MIN_PERMLINK_LENGTH"] = SURF_MIN_PERMLINK_LENGTH;
   result["SURF_MIN_REPLY_INTERVAL"] = SURF_MIN_REPLY_INTERVAL;
   result["SURF_MIN_ROOT_COMMENT_INTERVAL"] = SURF_MIN_ROOT_COMMENT_INTERVAL;
   result["SURF_MIN_VOTE_INTERVAL_SEC"] = SURF_MIN_VOTE_INTERVAL_SEC;
   result["SURF_MINER_ACCOUNT"] = SURF_MINER_ACCOUNT;
   result["SURF_MIN_TRANSACTION_EXPIRATION_LIMIT"] = SURF_MIN_TRANSACTION_EXPIRATION_LIMIT;
   result["SURF_MIN_UNDO_HISTORY"] = SURF_MIN_UNDO_HISTORY;
   result["SURF_NULL_ACCOUNT"] = SURF_NULL_ACCOUNT;
   result["SURF_OWNER_AUTH_HISTORY_TRACKING_START_BLOCK_NUM"] = SURF_OWNER_AUTH_HISTORY_TRACKING_START_BLOCK_NUM;
   result["SURF_OWNER_AUTH_RECOVERY_PERIOD"] = SURF_OWNER_AUTH_RECOVERY_PERIOD;
   result["SURF_OWNER_CHALLENGE_FEE"] = SURF_OWNER_CHALLENGE_FEE;
   result["SURF_OWNER_UPDATE_LIMIT"] = SURF_OWNER_UPDATE_LIMIT;
   result["SURF_POST_REWARD_FUND_NAME"] = SURF_POST_REWARD_FUND_NAME;
   result["SURF_PROXY_TO_SELF_ACCOUNT"] = SURF_PROXY_TO_SELF_ACCOUNT;
   result["SURF_SECONDS_PER_YEAR"] = SURF_SECONDS_PER_YEAR;
   result["SURF_SURF_ACCOUNT"] = SURF_SURF_ACCOUNT;
   result["SURF_RECENT_RSHARES_DECAY_RATE"] = SURF_RECENT_RSHARES_DECAY_RATE;
   result["SURF_REVERSE_AUCTION_WINDOW_SECONDS"] = SURF_REVERSE_AUCTION_WINDOW_SECONDS;
   result["SURF_ROOT_POST_PARENT"] = SURF_ROOT_POST_PARENT;
   result["SURF_SOFT_MAX_COMMENT_DEPTH"] = SURF_SOFT_MAX_COMMENT_DEPTH;
   result["SURF_START_MINER_VOTING_BLOCK"] = SURF_START_MINER_VOTING_BLOCK;
   result["SURF_SYMBOL_STR"] = SURF_SYMBOL_STR;
   result["SURF_TEMP_ACCOUNT"] = SURF_TEMP_ACCOUNT;
   result["SURF_UPVOTE_LOCKOUT"] = SURF_UPVOTE_LOCKOUT;
   result["SURF_VESTING_FUND_PERCENT"] = SURF_VESTING_FUND_PERCENT;
   result["SURF_VESTING_WITHDRAW_INTERVALS"] = SURF_VESTING_WITHDRAW_INTERVALS;
   result["SURF_VESTING_WITHDRAW_INTERVAL_SECONDS"] = SURF_VESTING_WITHDRAW_INTERVAL_SECONDS;
   result["SURF_VOTE_DUST_THRESHOLD"] = SURF_VOTE_DUST_THRESHOLD;
   result["SURF_VOTE_REGENERATION_SECONDS"] = SURF_VOTE_REGENERATION_SECONDS;
   result["SURF_SYMBOL"] = SURF_SYMBOL;
   result["VESTS_SYMBOL"] = VESTS_SYMBOL;
   result["VIRTUAL_SCHEDULE_LAP_LENGTH"] = VIRTUAL_SCHEDULE_LAP_LENGTH;

   return result;
}

} } // surf::protocol
